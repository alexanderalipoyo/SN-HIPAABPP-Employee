{
  "stats": {
    "suites": 8,
    "tests": 74,
    "passes": 73,
    "pending": 0,
    "failures": 1,
    "start": "2022-10-04T07:42:39.218Z",
    "end": "2022-10-04T07:55:53.228Z",
    "duration": 681949,
    "testsRegistered": 74,
    "passPercent": 98.64864864864865,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2fcb7cd9-4eb8-455e-9ec3-7d41c694f0b1",
      "title": "",
      "fullFile": "cypress\\e2e\\hipaa-bpp\\employee\\general.feature",
      "file": "cypress\\e2e\\hipaa-bpp\\employee\\general.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "baca7889-5b7a-47d8-bde9-8202d941aaa2",
          "title": "General - Employee",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Application Menu : Default items should visible",
              "fullTitle": "General - Employee Application Menu : Default items should visible",
              "timedOut": null,
              "duration": 31130,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "204e0d0e-0e07-4c61-a2be-17b877c031fa",
              "parentUUID": "baca7889-5b7a-47d8-bde9-8202d941aaa2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Application Menu : Check texts/labels if visible",
              "fullTitle": "General - Employee Application Menu : Check texts/labels if visible",
              "timedOut": null,
              "duration": 68,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "7e066173-4b87-435c-be2d-31ca9e1f33d4",
              "parentUUID": "baca7889-5b7a-47d8-bde9-8202d941aaa2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Application Menu : Validate favorite application",
              "fullTitle": "General - Employee Application Menu : Validate favorite application",
              "timedOut": null,
              "duration": 15791,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "4675608a-7bcc-41f7-9c26-baa03851a0c2",
              "parentUUID": "baca7889-5b7a-47d8-bde9-8202d941aaa2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Profile : Default items and fields should visible",
              "fullTitle": "General - Employee My Profile : Default items and fields should visible",
              "timedOut": null,
              "duration": 1870,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "57987a86-cc49-47e5-9de5-93b8b9c63a8f",
              "parentUUID": "baca7889-5b7a-47d8-bde9-8202d941aaa2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Profile : Check texts/labels if visible",
              "fullTitle": "General - Employee My Profile : Check texts/labels if visible",
              "timedOut": null,
              "duration": 680,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "e90b2c5c-4cc1-4702-a50c-fbf71c2ec41b",
              "parentUUID": "baca7889-5b7a-47d8-bde9-8202d941aaa2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Profile : Update Basic Information",
              "fullTitle": "General - Employee My Profile : Update Basic Information",
              "timedOut": null,
              "duration": 7152,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "10bb7cef-b4e6-45db-b7a3-db20766d6529",
              "parentUUID": "baca7889-5b7a-47d8-bde9-8202d941aaa2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Profile : Display warning modal to disable weekly training and monthly newsletter emails",
              "fullTitle": "General - Employee My Profile : Display warning modal to disable weekly training and monthly newsletter emails",
              "timedOut": null,
              "duration": 1239,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "83b3f7ac-a962-468f-8ecc-a1132ed76b6c",
              "parentUUID": "baca7889-5b7a-47d8-bde9-8202d941aaa2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Profile (NEGATIVE) : Invalidate update button with empty mandatory fields",
              "fullTitle": "General - Employee My Profile (NEGATIVE) : Invalidate update button with empty mandatory fields",
              "timedOut": null,
              "duration": 1012,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "36df21aa-8e98-40fc-ab44-f6bfc615bfaa",
              "parentUUID": "baca7889-5b7a-47d8-bde9-8202d941aaa2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Profile (NEGATIVE) : Password and verify password fields does not match",
              "fullTitle": "General - Employee My Profile (NEGATIVE) : Password and verify password fields does not match",
              "timedOut": null,
              "duration": 1868,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "733cd3c0-28a7-49cf-99fb-9d04f7938e3d",
              "parentUUID": "baca7889-5b7a-47d8-bde9-8202d941aaa2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Profile (NEGATIVE) : Enter a screen name that has special characters",
              "fullTitle": "General - Employee My Profile (NEGATIVE) : Enter a screen name that has special characters",
              "timedOut": null,
              "duration": 2504,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "00e18a47-19a3-4c76-938c-626ac4e926ac",
              "parentUUID": "baca7889-5b7a-47d8-bde9-8202d941aaa2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Profile (EDGE CASE) : Add alphabet and special character on phone number",
              "fullTitle": "General - Employee My Profile (EDGE CASE) : Add alphabet and special character on phone number",
              "timedOut": null,
              "duration": 508,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "ef5a6ce0-c8ad-4353-b8e8-e1a895a6adea",
              "parentUUID": "baca7889-5b7a-47d8-bde9-8202d941aaa2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Profile (EDGE CASE) : Add alphabet and special character on mobile number",
              "fullTitle": "General - Employee My Profile (EDGE CASE) : Add alphabet and special character on mobile number",
              "timedOut": null,
              "duration": 484,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "fca6cc23-e2db-4749-a99d-dfb7c40f50ce",
              "parentUUID": "baca7889-5b7a-47d8-bde9-8202d941aaa2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Profile (OOTB) : Able to change country code on phone number",
              "fullTitle": "General - Employee My Profile (OOTB) : Able to change country code on phone number",
              "timedOut": null,
              "duration": 2708,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "f983b7ef-988a-4e57-92e1-78e51cfb6cfb",
              "parentUUID": "baca7889-5b7a-47d8-bde9-8202d941aaa2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Profile (OOTB) : Enter a screen name with spaces only",
              "fullTitle": "General - Employee My Profile (OOTB) : Enter a screen name with spaces only",
              "timedOut": null,
              "duration": 1673,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "f10a6614-5b5d-41f2-8001-5e018d84a7a3",
              "parentUUID": "baca7889-5b7a-47d8-bde9-8202d941aaa2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Profile : Disable update button when mandatory fields are empty",
              "fullTitle": "General - Employee My Profile : Disable update button when mandatory fields are empty",
              "timedOut": null,
              "duration": 706,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "125a33df-b6de-470e-8383-f48bfd3b62bb",
              "parentUUID": "baca7889-5b7a-47d8-bde9-8202d941aaa2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Profile : Validate Password Strength - risk",
              "fullTitle": "General - Employee My Profile : Validate Password Strength - risk",
              "timedOut": null,
              "duration": 467,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "5f644829-2083-4c37-9b97-b13eeffd1b75",
              "parentUUID": "baca7889-5b7a-47d8-bde9-8202d941aaa2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Profile : Validate Password Strength - weak",
              "fullTitle": "General - Employee My Profile : Validate Password Strength - weak",
              "timedOut": null,
              "duration": 444,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "9026ec8b-c333-44bc-a236-1d3dedc7a2d1",
              "parentUUID": "baca7889-5b7a-47d8-bde9-8202d941aaa2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Profile : Validate Password Strength - fair",
              "fullTitle": "General - Employee My Profile : Validate Password Strength - fair",
              "timedOut": null,
              "duration": 556,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "28fcde74-a24c-4e5e-a702-1f497f0c9c8e",
              "parentUUID": "baca7889-5b7a-47d8-bde9-8202d941aaa2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Profile : Validate Password Strength - good",
              "fullTitle": "General - Employee My Profile : Validate Password Strength - good",
              "timedOut": null,
              "duration": 639,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "b6f919d5-7b5a-49e9-9123-0ad05da48747",
              "parentUUID": "baca7889-5b7a-47d8-bde9-8202d941aaa2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Profile : Validate Password Strength - strong",
              "fullTitle": "General - Employee My Profile : Validate Password Strength - strong",
              "timedOut": null,
              "duration": 815,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "3e8aa872-5ed2-44c7-b329-d73a596c2d4e",
              "parentUUID": "baca7889-5b7a-47d8-bde9-8202d941aaa2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "204e0d0e-0e07-4c61-a2be-17b877c031fa",
            "7e066173-4b87-435c-be2d-31ca9e1f33d4",
            "4675608a-7bcc-41f7-9c26-baa03851a0c2",
            "57987a86-cc49-47e5-9de5-93b8b9c63a8f",
            "e90b2c5c-4cc1-4702-a50c-fbf71c2ec41b",
            "10bb7cef-b4e6-45db-b7a3-db20766d6529",
            "83b3f7ac-a962-468f-8ecc-a1132ed76b6c",
            "36df21aa-8e98-40fc-ab44-f6bfc615bfaa",
            "733cd3c0-28a7-49cf-99fb-9d04f7938e3d",
            "00e18a47-19a3-4c76-938c-626ac4e926ac",
            "ef5a6ce0-c8ad-4353-b8e8-e1a895a6adea",
            "fca6cc23-e2db-4749-a99d-dfb7c40f50ce",
            "f983b7ef-988a-4e57-92e1-78e51cfb6cfb",
            "f10a6614-5b5d-41f2-8001-5e018d84a7a3",
            "125a33df-b6de-470e-8383-f48bfd3b62bb",
            "5f644829-2083-4c37-9b97-b13eeffd1b75",
            "9026ec8b-c333-44bc-a236-1d3dedc7a2d1",
            "28fcde74-a24c-4e5e-a702-1f497f0c9c8e",
            "b6f919d5-7b5a-49e9-9123-0ad05da48747",
            "3e8aa872-5ed2-44c7-b329-d73a596c2d4e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 72314,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "13826c7d-f8aa-40b0-aca5-cb560d280f28",
      "title": "",
      "fullFile": "cypress\\e2e\\hipaa-bpp\\employee\\newsfeed.feature",
      "file": "cypress\\e2e\\hipaa-bpp\\employee\\newsfeed.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2ba2ec13-f439-425b-825d-f11e329dc658",
          "title": "Newsfeed - Employee",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Newsfeed : Default items should visible",
              "fullTitle": "Newsfeed - Employee Newsfeed : Default items should visible",
              "timedOut": null,
              "duration": 28295,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "b3186ac3-a0aa-458e-9e6e-d49216f198c1",
              "parentUUID": "2ba2ec13-f439-425b-825d-f11e329dc658",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Newsfeed : Check texts/labels if visible",
              "fullTitle": "Newsfeed - Employee Newsfeed : Check texts/labels if visible",
              "timedOut": null,
              "duration": 129,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "c38db97c-cef3-4709-ac48-88bfa26f835a",
              "parentUUID": "2ba2ec13-f439-425b-825d-f11e329dc658",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Newsfeed : Validate Notifications",
              "fullTitle": "Newsfeed - Employee Newsfeed : Validate Notifications",
              "timedOut": null,
              "duration": 2619,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "c4f7d6a7-1401-4aeb-8f4d-3459c3b67094",
              "parentUUID": "2ba2ec13-f439-425b-825d-f11e329dc658",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Newsfeed : Validate Advanced Filters",
              "fullTitle": "Newsfeed - Employee Newsfeed : Validate Advanced Filters",
              "timedOut": null,
              "duration": 8755,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "63fe9b90-9233-4879-9ffb-17a14dfba675",
              "parentUUID": "2ba2ec13-f439-425b-825d-f11e329dc658",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Newsfeed : Validate Sortings",
              "fullTitle": "Newsfeed - Employee Newsfeed : Validate Sortings",
              "timedOut": null,
              "duration": 6572,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "7f7768ed-a0f0-4c24-bb76-4cbf6d744200",
              "parentUUID": "2ba2ec13-f439-425b-825d-f11e329dc658",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Newsfeed : Validate Search by Hasthag",
              "fullTitle": "Newsfeed - Employee Newsfeed : Validate Search by Hasthag",
              "timedOut": null,
              "duration": 1046,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "ba03c682-734f-41b1-b320-f7706abdcdd2",
              "parentUUID": "2ba2ec13-f439-425b-825d-f11e329dc658",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Newsfeed : Validate Search by Users",
              "fullTitle": "Newsfeed - Employee Newsfeed : Validate Search by Users",
              "timedOut": null,
              "duration": 946,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "4e3746a1-a7c3-4662-a3b1-86149a046aa4",
              "parentUUID": "2ba2ec13-f439-425b-825d-f11e329dc658",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Newsfeed (NEGATIVE) : Validate MA/M/E (non-internal bpp) does not have authorized to publish a post",
              "fullTitle": "Newsfeed - Employee Newsfeed (NEGATIVE) : Validate MA/M/E (non-internal bpp) does not have authorized to publish a post",
              "timedOut": null,
              "duration": 156,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "3ccc6412-aaef-4d88-a8b2-352ea3868f02",
              "parentUUID": "2ba2ec13-f439-425b-825d-f11e329dc658",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Newsfeed (EDGE) : Validate Press \"ENTER\" key on keyboard on Newsfeed Screen",
              "fullTitle": "Newsfeed - Employee Newsfeed (EDGE) : Validate Press \"ENTER\" key on keyboard on Newsfeed Screen",
              "timedOut": null,
              "duration": 179,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "a8f339e2-6743-40a6-b5ba-c1b5d93bc8e9",
              "parentUUID": "2ba2ec13-f439-425b-825d-f11e329dc658",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Newsfeed (NEGATIVE) : Validate search on non existing user",
              "fullTitle": "Newsfeed - Employee Newsfeed (NEGATIVE) : Validate search on non existing user",
              "timedOut": null,
              "duration": 2196,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "de213d4e-29a5-4fac-8d51-a52a83ff4624",
              "parentUUID": "2ba2ec13-f439-425b-825d-f11e329dc658",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Newsfeed (NEGATIVE) : Validate search on non existing hashtags",
              "fullTitle": "Newsfeed - Employee Newsfeed (NEGATIVE) : Validate search on non existing hashtags",
              "timedOut": null,
              "duration": 2616,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "aada5a79-0b11-4f1c-87dc-acab79a94061",
              "parentUUID": "2ba2ec13-f439-425b-825d-f11e329dc658",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b3186ac3-a0aa-458e-9e6e-d49216f198c1",
            "c38db97c-cef3-4709-ac48-88bfa26f835a",
            "c4f7d6a7-1401-4aeb-8f4d-3459c3b67094",
            "63fe9b90-9233-4879-9ffb-17a14dfba675",
            "7f7768ed-a0f0-4c24-bb76-4cbf6d744200",
            "ba03c682-734f-41b1-b320-f7706abdcdd2",
            "4e3746a1-a7c3-4662-a3b1-86149a046aa4",
            "3ccc6412-aaef-4d88-a8b2-352ea3868f02",
            "a8f339e2-6743-40a6-b5ba-c1b5d93bc8e9",
            "de213d4e-29a5-4fac-8d51-a52a83ff4624",
            "aada5a79-0b11-4f1c-87dc-acab79a94061"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 53509,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "c13e1a0c-b881-44d6-a1ab-4081feb87cfa",
      "title": "",
      "fullFile": "cypress\\e2e\\hipaa-bpp\\employee\\my-dashboard\\employee-dark-web.feature",
      "file": "cypress\\e2e\\hipaa-bpp\\employee\\my-dashboard\\employee-dark-web.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7ab031a8-b9d7-49a3-83f0-4e0546459962",
          "title": "Dark Web - Run DWBA",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "My Dashboard - Dark Web : Default items should visible",
              "fullTitle": "Dark Web - Run DWBA My Dashboard - Dark Web : Default items should visible",
              "timedOut": null,
              "duration": 29891,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "3585926e-2c43-4c9c-bf4a-48952dd944ab",
              "parentUUID": "7ab031a8-b9d7-49a3-83f0-4e0546459962",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Dark Web : Check texts/labels if visible",
              "fullTitle": "Dark Web - Run DWBA My Dashboard - Dark Web : Check texts/labels if visible",
              "timedOut": null,
              "duration": 327,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "9f6fd5fc-068a-4484-ae3f-ab128fbb0b38",
              "parentUUID": "7ab031a8-b9d7-49a3-83f0-4e0546459962",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Dark Web : Validate check emails associated with any external data breaches",
              "fullTitle": "Dark Web - Run DWBA My Dashboard - Dark Web : Validate check emails associated with any external data breaches",
              "timedOut": null,
              "duration": 5683,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "26c80009-0ac4-4627-bb9c-283e5cceeaa1",
              "parentUUID": "7ab031a8-b9d7-49a3-83f0-4e0546459962",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Dark Web : Validate check emails not associated with any external data breaches",
              "fullTitle": "Dark Web - Run DWBA My Dashboard - Dark Web : Validate check emails not associated with any external data breaches",
              "timedOut": null,
              "duration": 2673,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "df196beb-c62a-4c51-9b11-2ec4e8c6f42b",
              "parentUUID": "7ab031a8-b9d7-49a3-83f0-4e0546459962",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Dark Web (NEGATIVE) : Invalidate checking with empty email address field",
              "fullTitle": "Dark Web - Run DWBA My Dashboard - Dark Web (NEGATIVE) : Invalidate checking with empty email address field",
              "timedOut": null,
              "duration": 270,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "76603ed5-881e-49ac-8e16-b15e47d81576",
              "parentUUID": "7ab031a8-b9d7-49a3-83f0-4e0546459962",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Dark Web (NEGATIVE) : Invalidate check email with invalid email format",
              "fullTitle": "Dark Web - Run DWBA My Dashboard - Dark Web (NEGATIVE) : Invalidate check email with invalid email format",
              "timedOut": null,
              "duration": 793,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "57833187-b0e7-4716-8d6d-c730631b1d35",
              "parentUUID": "7ab031a8-b9d7-49a3-83f0-4e0546459962",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Dark Web (NEGATIVE) : Validate table results after updating or clearing email address field",
              "fullTitle": "Dark Web - Run DWBA My Dashboard - Dark Web (NEGATIVE) : Validate table results after updating or clearing email address field",
              "timedOut": null,
              "duration": 5898,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "3130fb83-e53f-44b0-9fa5-ee10b44e89aa",
              "parentUUID": "7ab031a8-b9d7-49a3-83f0-4e0546459962",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Dark Web (OOTB) : Reset table results after page refresh",
              "fullTitle": "Dark Web - Run DWBA My Dashboard - Dark Web (OOTB) : Reset table results after page refresh",
              "timedOut": null,
              "duration": 3034,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "ad18070b-ab17-4b28-b3a2-30bb8b72ede5",
              "parentUUID": "7ab031a8-b9d7-49a3-83f0-4e0546459962",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Dark Web (OOTB) : Validate API results when generating results",
              "fullTitle": "Dark Web - Run DWBA My Dashboard - Dark Web (OOTB) : Validate API results when generating results",
              "timedOut": null,
              "duration": 8633,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "d01c1a20-9b8f-4927-86c8-03ba21bab645",
              "parentUUID": "7ab031a8-b9d7-49a3-83f0-4e0546459962",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Dark Web (EDGE) : Validate column sorting",
              "fullTitle": "Dark Web - Run DWBA My Dashboard - Dark Web (EDGE) : Validate column sorting",
              "timedOut": null,
              "duration": 12325,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "bbe7ea1e-5eb3-4765-94f1-406b7844a691",
              "parentUUID": "7ab031a8-b9d7-49a3-83f0-4e0546459962",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Dark Web (EDGE) : Validate return results on Compromised Data",
              "fullTitle": "Dark Web - Run DWBA My Dashboard - Dark Web (EDGE) : Validate return results on Compromised Data",
              "timedOut": null,
              "duration": 291,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "51cb6cd8-1e83-440f-8689-6ce8e4dbe5ed",
              "parentUUID": "7ab031a8-b9d7-49a3-83f0-4e0546459962",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3585926e-2c43-4c9c-bf4a-48952dd944ab",
            "9f6fd5fc-068a-4484-ae3f-ab128fbb0b38",
            "26c80009-0ac4-4627-bb9c-283e5cceeaa1",
            "df196beb-c62a-4c51-9b11-2ec4e8c6f42b",
            "76603ed5-881e-49ac-8e16-b15e47d81576",
            "57833187-b0e7-4716-8d6d-c730631b1d35",
            "3130fb83-e53f-44b0-9fa5-ee10b44e89aa",
            "ad18070b-ab17-4b28-b3a2-30bb8b72ede5",
            "d01c1a20-9b8f-4927-86c8-03ba21bab645",
            "bbe7ea1e-5eb3-4765-94f1-406b7844a691",
            "51cb6cd8-1e83-440f-8689-6ce8e4dbe5ed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 69818,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "b83e571c-6f86-40d3-a15e-6530674b519f",
      "title": "",
      "fullFile": "cypress\\e2e\\hipaa-bpp\\employee\\my-dashboard\\employee-micro-training.feature",
      "file": "cypress\\e2e\\hipaa-bpp\\employee\\my-dashboard\\employee-micro-training.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "674c50d2-be5a-4f0d-9b86-d2aeddf47072",
          "title": "Micro Training",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "My Dashboard - Micro Training : Default items should visible",
              "fullTitle": "Micro Training My Dashboard - Micro Training : Default items should visible",
              "timedOut": null,
              "duration": 29402,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "2fa6e0b8-ae05-418d-8232-dd7d2ce6ae64",
              "parentUUID": "674c50d2-be5a-4f0d-9b86-d2aeddf47072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Micro Training : Check texts/labels if visible",
              "fullTitle": "Micro Training My Dashboard - Micro Training : Check texts/labels if visible",
              "timedOut": null,
              "duration": 671,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "287e3caa-3e27-4a31-8ba0-5e9503e3d00a",
              "parentUUID": "674c50d2-be5a-4f0d-9b86-d2aeddf47072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Micro Training : Validate All existing micro Trainings",
              "fullTitle": "Micro Training My Dashboard - Micro Training : Validate All existing micro Trainings",
              "timedOut": null,
              "duration": 34157,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "affde499-aafc-4528-a0a6-559cf5417d58",
              "parentUUID": "674c50d2-be5a-4f0d-9b86-d2aeddf47072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Micro Training (EDGE): Validate all unsubmitted answers on micro trainings",
              "fullTitle": "Micro Training My Dashboard - Micro Training (EDGE): Validate all unsubmitted answers on micro trainings",
              "timedOut": null,
              "duration": 32372,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "4a611f30-cf02-49d5-be2a-cf5ac40ba9a8",
              "parentUUID": "674c50d2-be5a-4f0d-9b86-d2aeddf47072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Micro Training (EDGE) : Validate all answered on micro trainings",
              "fullTitle": "Micro Training My Dashboard - Micro Training (EDGE) : Validate all answered on micro trainings",
              "timedOut": null,
              "duration": 37613,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "a7dfcd5a-d044-466d-9fab-06d5a83db4b7",
              "parentUUID": "674c50d2-be5a-4f0d-9b86-d2aeddf47072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Micro Training (NEGATIVE) : Validate submission button and answers on submitted trainings",
              "fullTitle": "Micro Training My Dashboard - Micro Training (NEGATIVE) : Validate submission button and answers on submitted trainings",
              "timedOut": null,
              "duration": 5777,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "d945c2cb-0919-4f1c-8000-f7d0a7e8f798",
              "parentUUID": "674c50d2-be5a-4f0d-9b86-d2aeddf47072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Micro Training (NEGATIVE) : Validate disable submit button if no answers",
              "fullTitle": "Micro Training My Dashboard - Micro Training (NEGATIVE) : Validate disable submit button if no answers",
              "timedOut": null,
              "duration": 7025,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "9bf9e3ec-777a-4ede-a5cb-8daa6d8dc1fd",
              "parentUUID": "674c50d2-be5a-4f0d-9b86-d2aeddf47072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Micro Training : Validate answer selections on unsubmitted micto trainings",
              "fullTitle": "Micro Training My Dashboard - Micro Training : Validate answer selections on unsubmitted micto trainings",
              "timedOut": null,
              "duration": 6015,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "6ade1274-4e91-404f-a9bb-d58815d33728",
              "parentUUID": "674c50d2-be5a-4f0d-9b86-d2aeddf47072",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2fa6e0b8-ae05-418d-8232-dd7d2ce6ae64",
            "287e3caa-3e27-4a31-8ba0-5e9503e3d00a",
            "affde499-aafc-4528-a0a6-559cf5417d58",
            "4a611f30-cf02-49d5-be2a-cf5ac40ba9a8",
            "a7dfcd5a-d044-466d-9fab-06d5a83db4b7",
            "d945c2cb-0919-4f1c-8000-f7d0a7e8f798",
            "9bf9e3ec-777a-4ede-a5cb-8daa6d8dc1fd",
            "6ade1274-4e91-404f-a9bb-d58815d33728"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 153032,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "4751589f-ecc7-4152-a8d1-0d829bd10f21",
      "title": "",
      "fullFile": "cypress\\e2e\\hipaa-bpp\\employee\\my-dashboard\\employee-newsletters.feature",
      "file": "cypress\\e2e\\hipaa-bpp\\employee\\my-dashboard\\employee-newsletters.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "eb689b0b-4c5d-4027-adef-4bc8a71ff029",
          "title": "Newsletters",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "My Dashboard - Newsletters : Default items should visible",
              "fullTitle": "Newsletters My Dashboard - Newsletters : Default items should visible",
              "timedOut": null,
              "duration": 32919,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "f6361580-f3d4-4bc2-a5d5-0685c34e361f",
              "parentUUID": "eb689b0b-4c5d-4027-adef-4bc8a71ff029",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Newsletters : Check texts/labels if visible",
              "fullTitle": "Newsletters My Dashboard - Newsletters : Check texts/labels if visible",
              "timedOut": null,
              "duration": 32126,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "6e9cc658-7ca6-4b9c-bdf2-ec28b301f34d",
              "parentUUID": "eb689b0b-4c5d-4027-adef-4bc8a71ff029",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Newsletters : Validate newsletters pdf reports",
              "fullTitle": "Newsletters My Dashboard - Newsletters : Validate newsletters pdf reports",
              "timedOut": null,
              "duration": 3523,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "a0e14d51-f92f-4af2-b8c8-ad01131b57f6",
              "parentUUID": "eb689b0b-4c5d-4027-adef-4bc8a71ff029",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f6361580-f3d4-4bc2-a5d5-0685c34e361f",
            "6e9cc658-7ca6-4b9c-bdf2-ec28b301f34d",
            "a0e14d51-f92f-4af2-b8c8-ad01131b57f6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 68568,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "30fefe7c-399f-43ea-b974-c4b6d69a0b37",
      "title": "",
      "fullFile": "cypress\\e2e\\hipaa-bpp\\employee\\my-dashboard\\employee-policies.feature",
      "file": "cypress\\e2e\\hipaa-bpp\\employee\\my-dashboard\\employee-policies.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0c7d55ed-016f-4d51-9912-bc95e58861ba",
          "title": "Policy & Procedure",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "My Dashboard : Default items should visible",
              "fullTitle": "Policy & Procedure My Dashboard : Default items should visible",
              "timedOut": null,
              "duration": 39180,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "fa8dc7cc-022c-4f2f-a8ac-7aa9851d72cd",
              "parentUUID": "0c7d55ed-016f-4d51-9912-bc95e58861ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard : Check texts/labels if visible",
              "fullTitle": "Policy & Procedure My Dashboard : Check texts/labels if visible",
              "timedOut": null,
              "duration": 50636,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "AssertionError: Timed out retrying after 50000ms: expected '<tbody.MuiTableBody-root-490.ComponentTypes__TableBodyContent-sc-nb4o94-8.kVwtQY>' to contain text '2022-07-12', but the text was '1Administrative - Security Management PolicyAn overall requirement to implement policies and procedures to prevent, detect, contain, and correct security violations.2Administrative - Security Officer PolicyA single individual must be designated as having overall responsibility for the security of a organization\\'s ePHI.3Administrative - Workforce SecurityPolicies, procedures, and processes must be developed and implemented that ensure only properly-authorized workforce members have access to ePHI.4Administrative - Information Access ManagementPolicies, procedures, and processes must be developed and implemented for authorizing, establishing, and modifying access to ePHI.5Administrative - Security Awareness and TrainingA security awareness and training program for the entire workforce must be developed and implemented.6Administrative - Security Incident ProceduresPolicies, procedures, and processes must be developed and implemented for reporting, responding to, and managing security incidents.7Administrative - Contingency PlanPolicies, procedures, and processes must be developed and implemented for responding to a disaster or emergency that damages information systems containing ePHI.8Administrative - EvaluationOrganizations must perform periodic technical and non-technical evaluations that determine the extent to which an organization\\'s security policies, procedures, and processes meet the ongoing requirements of the Security Rule.9Administrative - Business Associate ContractsOrganizations must, when dealing with business associates that create, receive, maintain, or transmit ePHI on the organizations behalf, develop and implement contracts that ensure the business associate will appropriately safeguard the information.10Physical - Facility Access ControlsAn overall requirement to implement policies, procedures, and processes that limit physical access to electronic information systems while ensuring that properly-authorized access is allowed.11Physical - Workstation UsePolicies and procedures must be developed and implemented that specify appropriate use of workstations and the characteristics of the physical environment of workstations that can access ePHI.12Physical - Workstation SecurityOrganizations must implement physical safeguards for all workstations that can access ePHI in order to limit access to only authorized users.13Physical - Device and Media ControlsPolicies, procedures, and processes must be developed and implemented for the receipt and removal of hardware and electronic media that contain ePHI into and out of an organization, and the movement of those items within an organization.14Technical - Access Control Policies, procedures, and processes must be developed and implemented for electronic information systems that contain ePHI to only allow access to persons or software programs that have appropriate access rights.15Technical - Audit ControlsPolicies, procedures, and processes must be developed and implemented to record and examine access and other activity in information systems that contain or use ePHI.16Technical - Integrity PolicyPolicies, procedures, and processes must be developed and implemented that protect ePHI from improper modification or destruction.17Technical - Person or Entity Authentication Policies, procedures, and processes must be developed and implemented that verify persons or entities seeking access to ePHI are who or what they claim to be.18Technical - Transmission SecurityPolicies, procedures, and processes must be developed and implemented that prevent unauthorized access to ePHI that is being transmitted over an electronic communications network (e.g., the Internet).19HIPAA Privacy ManualPolicies and Procedures that details the rights of an individual to control the use of his or her personal information. And describes how organizations can use or disclose the information (Only available for Covered Entities).'",
                "estack": "AssertionError: Timed out retrying after 50000ms: expected '<tbody.MuiTableBody-root-490.ComponentTypes__TableBodyContent-sc-nb4o94-8.kVwtQY>' to contain text '2022-07-12', but the text was '1Administrative - Security Management PolicyAn overall requirement to implement policies and procedures to prevent, detect, contain, and correct security violations.2Administrative - Security Officer PolicyA single individual must be designated as having overall responsibility for the security of a organization\\'s ePHI.3Administrative - Workforce SecurityPolicies, procedures, and processes must be developed and implemented that ensure only properly-authorized workforce members have access to ePHI.4Administrative - Information Access ManagementPolicies, procedures, and processes must be developed and implemented for authorizing, establishing, and modifying access to ePHI.5Administrative - Security Awareness and TrainingA security awareness and training program for the entire workforce must be developed and implemented.6Administrative - Security Incident ProceduresPolicies, procedures, and processes must be developed and implemented for reporting, responding to, and managing security incidents.7Administrative - Contingency PlanPolicies, procedures, and processes must be developed and implemented for responding to a disaster or emergency that damages information systems containing ePHI.8Administrative - EvaluationOrganizations must perform periodic technical and non-technical evaluations that determine the extent to which an organization\\'s security policies, procedures, and processes meet the ongoing requirements of the Security Rule.9Administrative - Business Associate ContractsOrganizations must, when dealing with business associates that create, receive, maintain, or transmit ePHI on the organizations behalf, develop and implement contracts that ensure the business associate will appropriately safeguard the information.10Physical - Facility Access ControlsAn overall requirement to implement policies, procedures, and processes that limit physical access to electronic information systems while ensuring that properly-authorized access is allowed.11Physical - Workstation UsePolicies and procedures must be developed and implemented that specify appropriate use of workstations and the characteristics of the physical environment of workstations that can access ePHI.12Physical - Workstation SecurityOrganizations must implement physical safeguards for all workstations that can access ePHI in order to limit access to only authorized users.13Physical - Device and Media ControlsPolicies, procedures, and processes must be developed and implemented for the receipt and removal of hardware and electronic media that contain ePHI into and out of an organization, and the movement of those items within an organization.14Technical - Access Control Policies, procedures, and processes must be developed and implemented for electronic information systems that contain ePHI to only allow access to persons or software programs that have appropriate access rights.15Technical - Audit ControlsPolicies, procedures, and processes must be developed and implemented to record and examine access and other activity in information systems that contain or use ePHI.16Technical - Integrity PolicyPolicies, procedures, and processes must be developed and implemented that protect ePHI from improper modification or destruction.17Technical - Person or Entity Authentication Policies, procedures, and processes must be developed and implemented that verify persons or entities seeking access to ePHI are who or what they claim to be.18Technical - Transmission SecurityPolicies, procedures, and processes must be developed and implemented that prevent unauthorized access to ePHI that is being transmitted over an electronic communications network (e.g., the Internet).19HIPAA Privacy ManualPolicies and Procedures that details the rights of an individual to control the use of his or her personal information. And describes how organizations can use or disclose the information (Only available for Covered Entities).'\n    at myDashboardPolicies.policyTypes (cypress/page-objects/internal-bpp/partner-admin/my-dashboard/policies.ts:215:25)\n    at Context.eval (cypress/e2e/hipaa-bpp/employee/my-dashboard/employee-policies/employee_policies.ts:67:13)\n    at Context.resolveAndRunStepDefinition (node_modules/cypress-cucumber-preprocessor/lib/resolveStepDefinition.js:193:0)\n    at Context.eval (node_modules/cypress-cucumber-preprocessor/lib/createTestFromScenario.js:27:0)",
                "diff": "- '1Administrative - Security Management PolicyAn overall requirement to implement policies and procedures to prevent, detect, contain, and correct security violations.2Administrative - Security Officer PolicyA single individual must be designated as having overall responsibility for the security of a organization\\'s ePHI.3Administrative - Workforce SecurityPolicies, procedures, and processes must be developed and implemented that ensure only properly-authorized workforce members have access to ePHI.4Administrative - Information Access ManagementPolicies, procedures, and processes must be developed and implemented for authorizing, establishing, and modifying access to ePHI.5Administrative - Security Awareness and TrainingA security awareness and training program for the entire workforce must be developed and implemented.6Administrative - Security Incident ProceduresPolicies, procedures, and processes must be developed and implemented for reporting, responding to, and managing security incidents.7Administrative - Contingency PlanPolicies, procedures, and processes must be developed and implemented for responding to a disaster or emergency that damages information systems containing ePHI.8Administrative - EvaluationOrganizations must perform periodic technical and non-technical evaluations that determine the extent to which an organization\\'s security policies, procedures, and processes meet the ongoing requirements of the Security Rule.9Administrative - Business Associate ContractsOrganizations must, when dealing with business associates that create, receive, maintain, or transmit ePHI on the organizations behalf, develop and implement contracts that ensure the business associate will appropriately safeguard the information.10Physical - Facility Access ControlsAn overall requirement to implement policies, procedures, and processes that limit physical access to electronic information systems while ensuring that properly-authorized access is allowed.11Physical - Workstation UsePolicies and procedures must be developed and implemented that specify appropriate use of workstations and the characteristics of the physical environment of workstations that can access ePHI.12Physical - Workstation SecurityOrganizations must implement physical safeguards for all workstations that can access ePHI in order to limit access to only authorized users.13Physical - Device and Media ControlsPolicies, procedures, and processes must be developed and implemented for the receipt and removal of hardware and electronic media that contain ePHI into and out of an organization, and the movement of those items within an organization.14Technical - Access Control Policies, procedures, and processes must be developed and implemented for electronic information systems that contain ePHI to only allow access to persons or software programs that have appropriate access rights.15Technical - Audit ControlsPolicies, procedures, and processes must be developed and implemented to record and examine access and other activity in information systems that contain or use ePHI.16Technical - Integrity PolicyPolicies, procedures, and processes must be developed and implemented that protect ePHI from improper modification or destruction.17Technical - Person or Entity Authentication Policies, procedures, and processes must be developed and implemented that verify persons or entities seeking access to ePHI are who or what they claim to be.18Technical - Transmission SecurityPolicies, procedures, and processes must be developed and implemented that prevent unauthorized access to ePHI that is being transmitted over an electronic communications network (e.g., the Internet).19HIPAA Privacy ManualPolicies and Procedures that details the rights of an individual to control the use of his or her personal information. And describes how organizations can use or disclose the information (Only available for Covered Entities).'\n+ '2022-07-12'\n"
              },
              "uuid": "2d26aa8a-6b97-4773-859b-f5dd91ab1a76",
              "parentUUID": "0c7d55ed-016f-4d51-9912-bc95e58861ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Acknowledge All policies",
              "fullTitle": "Policy & Procedure Acknowledge All policies",
              "timedOut": null,
              "duration": 8296,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "680ea455-4365-48dd-a99a-6a8eddf86a0e",
              "parentUUID": "0c7d55ed-016f-4d51-9912-bc95e58861ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Acknowledge All other policies",
              "fullTitle": "Policy & Procedure Acknowledge All other policies",
              "timedOut": null,
              "duration": 6768,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "aa29e82f-4997-49a5-9bf3-8494aeab92e4",
              "parentUUID": "0c7d55ed-016f-4d51-9912-bc95e58861ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Dashboard Policies (OOTB) : Validate API status when downloading all existing policies",
              "fullTitle": "Policy & Procedure Dashboard Policies (OOTB) : Validate API status when downloading all existing policies",
              "timedOut": null,
              "duration": 11890,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "09c8e825-20bb-4a9b-ae7b-463756f1fa4e",
              "parentUUID": "0c7d55ed-016f-4d51-9912-bc95e58861ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Dashboard Policies (OOTB) : Validate API status when downloading other policies",
              "fullTitle": "Policy & Procedure Dashboard Policies (OOTB) : Validate API status when downloading other policies",
              "timedOut": null,
              "duration": 4248,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "8c972e10-707a-46a9-b9d6-0bd5db33bded",
              "parentUUID": "0c7d55ed-016f-4d51-9912-bc95e58861ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Dashboard Policies (NEGATIVE) : Hide created and modified date in other policies",
              "fullTitle": "Policy & Procedure Dashboard Policies (NEGATIVE) : Hide created and modified date in other policies",
              "timedOut": null,
              "duration": 2379,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "0f8da095-0b0f-4f4d-a304-f677c333502f",
              "parentUUID": "0c7d55ed-016f-4d51-9912-bc95e58861ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Dashboard Policies (NEGATIVE) : Hide created and modified date in existing policies",
              "fullTitle": "Policy & Procedure Dashboard Policies (NEGATIVE) : Hide created and modified date in existing policies",
              "timedOut": null,
              "duration": 2389,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "741bb9e6-3ae1-4018-9b0b-0a83e8bcc1d9",
              "parentUUID": "0c7d55ed-016f-4d51-9912-bc95e58861ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Dashboard Policies (EDGE) : Validate existing policies via modal",
              "fullTitle": "Policy & Procedure Dashboard Policies (EDGE) : Validate existing policies via modal",
              "timedOut": null,
              "duration": 11322,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "fe4ed7a4-6e60-445f-bb07-b37377cff63c",
              "parentUUID": "0c7d55ed-016f-4d51-9912-bc95e58861ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Dashboard Policies (EDGE) : Validate other policies via modal",
              "fullTitle": "Policy & Procedure Dashboard Policies (EDGE) : Validate other policies via modal",
              "timedOut": null,
              "duration": 6335,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "6afb0a83-d69a-4981-bfce-a8a9593bf722",
              "parentUUID": "0c7d55ed-016f-4d51-9912-bc95e58861ba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fa8dc7cc-022c-4f2f-a8ac-7aa9851d72cd",
            "680ea455-4365-48dd-a99a-6a8eddf86a0e",
            "aa29e82f-4997-49a5-9bf3-8494aeab92e4",
            "09c8e825-20bb-4a9b-ae7b-463756f1fa4e",
            "8c972e10-707a-46a9-b9d6-0bd5db33bded",
            "0f8da095-0b0f-4f4d-a304-f677c333502f",
            "741bb9e6-3ae1-4018-9b0b-0a83e8bcc1d9",
            "fe4ed7a4-6e60-445f-bb07-b37377cff63c",
            "6afb0a83-d69a-4981-bfce-a8a9593bf722"
          ],
          "failures": [
            "2d26aa8a-6b97-4773-859b-f5dd91ab1a76"
          ],
          "pending": [],
          "skipped": [],
          "duration": 143443,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e1c0ad01-ff81-4f24-a8c6-f925e3f00c5d",
      "title": "",
      "fullFile": "cypress\\e2e\\hipaa-bpp\\employee\\my-dashboard\\employee-training.feature",
      "file": "cypress\\e2e\\hipaa-bpp\\employee\\my-dashboard\\employee-training.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a8683319-f5f9-4f86-99fc-9637271d19b6",
          "title": "Training",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "My Dashboard - Training : Default items should visible",
              "fullTitle": "Training My Dashboard - Training : Default items should visible",
              "timedOut": null,
              "duration": 29259,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "06695645-1528-49c1-906b-f339d970bb76",
              "parentUUID": "a8683319-f5f9-4f86-99fc-9637271d19b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Training : Check texts/labels if visible",
              "fullTitle": "Training My Dashboard - Training : Check texts/labels if visible",
              "timedOut": null,
              "duration": 312,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "340e065b-dde4-4957-984d-48434b2462f1",
              "parentUUID": "a8683319-f5f9-4f86-99fc-9637271d19b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Training : Validate Cybersecurity Training Videos",
              "fullTitle": "Training My Dashboard - Training : Validate Cybersecurity Training Videos",
              "timedOut": null,
              "duration": 14636,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "7a8f6ba1-06f9-4f3b-80c8-aceb96b28b26",
              "parentUUID": "a8683319-f5f9-4f86-99fc-9637271d19b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Training (EDGE) : Validate Security Quiz",
              "fullTitle": "Training My Dashboard - Training (EDGE) : Validate Security Quiz",
              "timedOut": null,
              "duration": 21219,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "267b1e55-4f06-44b4-bb25-9a43906d5cf9",
              "parentUUID": "a8683319-f5f9-4f86-99fc-9637271d19b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Training (EDGE) : Validate Reviewing Security Quiz",
              "fullTitle": "Training My Dashboard - Training (EDGE) : Validate Reviewing Security Quiz",
              "timedOut": null,
              "duration": 3442,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "3349322c-6f3f-4991-9621-8d9a5e421745",
              "parentUUID": "a8683319-f5f9-4f86-99fc-9637271d19b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Training : Validate Retaking Security Quiz",
              "fullTitle": "Training My Dashboard - Training : Validate Retaking Security Quiz",
              "timedOut": null,
              "duration": 6391,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "f0e47891-8578-41b2-b8b8-afcc9f91de0d",
              "parentUUID": "a8683319-f5f9-4f86-99fc-9637271d19b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "My Dashboard - Training : Validate Step 3 - Print Your Certificate",
              "fullTitle": "Training My Dashboard - Training : Validate Step 3 - Print Your Certificate",
              "timedOut": null,
              "duration": 8732,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "b5471082-0efd-4c72-a143-7fc27af79895",
              "parentUUID": "a8683319-f5f9-4f86-99fc-9637271d19b6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "06695645-1528-49c1-906b-f339d970bb76",
            "340e065b-dde4-4957-984d-48434b2462f1",
            "7a8f6ba1-06f9-4f3b-80c8-aceb96b28b26",
            "267b1e55-4f06-44b4-bb25-9a43906d5cf9",
            "3349322c-6f3f-4991-9621-8d9a5e421745",
            "f0e47891-8578-41b2-b8b8-afcc9f91de0d",
            "b5471082-0efd-4c72-a143-7fc27af79895"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 83991,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "77cb716d-06d2-4c20-aad8-8b5609d523f5",
      "title": "",
      "fullFile": "cypress\\e2e\\hipaa-bpp\\employee\\contact.feature",
      "file": "cypress\\e2e\\hipaa-bpp\\employee\\contact.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a9051d36-153d-4581-b65f-7393c880be00",
          "title": "Contact Us - Employee",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Contact Us : Default items should visible",
              "fullTitle": "Contact Us - Employee Contact Us : Default items should visible",
              "timedOut": null,
              "duration": 31574,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "ac520bcb-352f-4958-8b21-f8f6593133bb",
              "parentUUID": "a9051d36-153d-4581-b65f-7393c880be00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Contact Us : Check texts/labels if visible",
              "fullTitle": "Contact Us - Employee Contact Us : Check texts/labels if visible",
              "timedOut": null,
              "duration": 119,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "0bdaa714-2035-4114-9465-426e7733d2d7",
              "parentUUID": "a9051d36-153d-4581-b65f-7393c880be00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Contact Us : Validate cancel submission",
              "fullTitle": "Contact Us - Employee Contact Us : Validate cancel submission",
              "timedOut": null,
              "duration": 1782,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "39a22ffe-3cad-4e0a-99a5-eface6a9e706",
              "parentUUID": "a9051d36-153d-4581-b65f-7393c880be00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Contact Us (EDGE) : Validate contact-us submission",
              "fullTitle": "Contact Us - Employee Contact Us (EDGE) : Validate contact-us submission",
              "timedOut": null,
              "duration": 3799,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach((step) =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "dd16e2ad-cf60-4fd0-b33e-b37ec47857b5",
              "parentUUID": "a9051d36-153d-4581-b65f-7393c880be00",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ac520bcb-352f-4958-8b21-f8f6593133bb",
            "0bdaa714-2035-4114-9465-426e7733d2d7",
            "39a22ffe-3cad-4e0a-99a5-eface6a9e706",
            "dd16e2ad-cf60-4fd0-b33e-b37ec47857b5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 37274,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}